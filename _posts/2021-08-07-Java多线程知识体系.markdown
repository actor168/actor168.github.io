---
layout: post
title:  "Java多线程知识体系"
date:   2021-08-07 12:00:00 +0800
categories: Java 多线程
---
1. 认识多线程及`Java`多线程

- 线程和进程的区别

进程，是操作系统进行资源分配和调度的独立单位。操作系统管理CPU、内存、文件、网络等资源，同时也管理着软件程序的执行，操作系统在运行程序时，将进程作为资源的分配单位进行资源分配。

线程，是CPU调度执行的最小单位。线程作为进程的一部分，线程共享进程的上下文、内存、文件、网络等资源，仅仅是运行的CPU有所不同，是面向于多核CPU后出现的概念，从而实现了真正意义的并行。

进程=PCB（进程控制块=进程描述信息+进程控制和管理信息+资源分配清单+处理机相关信息）+程序+数据

- 线程间通信

线程间通信的方法一般有：共享内存、消息传递、管道。

共享内存：比如使用`volatile`, `mutex`, `condtion variable`
消息传递：
管道：`channel`

- `Java`线程

`Java`中`JVM`内置多线程支持，通过`Thread`类实现，通过创建`Thread`对象，即可实现多线程，并通过`start()`方法来运行。

- `Java`线程的使用

* 直接使用`Thread`

```java
public class Main {
    public static void main(String[] args) {
        Thread thread = new Thread() {
            public void run(){
                System.out.println("Thread Running");
            }
        }
        thread.start();
    }
}
```
* 实现`Runnable`接口 

```java
public interface Runnable() {
    public void run();
}
```
样例
```java
class MyThread implements Runnable {
    @override
    public void run() {
        System.out.println("Thread Running");
    }
}

public class Main {
    public static void main(String[] args) {
        Thread thread = new MyThread();
        thread.start();
    }
}
```

* 实现`Callable`接口

```java
public interface Callable<V> {
    V call() throws Exception;
}
```
样例
```java
class FactorialTask implements Callable<Integer> {
    int number;

    // standard constructors

    public Integer call() throws InvalidParamaterException {
        int fact = 1;
        // ...
        for(int count = number; count > 1; count--) {
            fact = fact * count;
        }

        return fact;
    }
}

public class Main {
    public static void main(String[] args) {
        FactorialTask task = new FactorialTask(5);
        Future<Integer> future = Executors.newSingleThreadExecutor().submit(task);
        System.out.println(future.get().intValue());
    }
}
```

- `Java`中关于`Thread`的相关方法

1.  `Thread`的`sleep()`, `yield()`  
线程休眠，但并不释放锁。

2. `Object`的`wait()`, `notify()`, `notifyAll()`  
线程被加入等待集合后，释放对象的锁。这是与sleep显著的不同
每个`Java`对象包含一个等待集合`wait set`，wait的本质还是对象的锁操作和将线程加入对象的等待集合的操作，调用wait，就会将线程放置于等待集合，调用当前object多少次wait()，就会在对象上加多少次由线程施加的lock行为的unlock操作，一旦被`notify`或`interrupt`后，又会重新加上lock。

```java
public class WaitNotify {
    public static void main(String[] args) throws InterruptedException {
        MyObj obj = new MyObj();
        Thread t = new Thread() {
            @Override
            public void run() {
                synchronized(obj) { // 此处必须先获取obj的锁，否则会报IllegalMonitorStateException
                    try {
                        System.out.println("线程获取了obj锁");
                        System.out.println("线程将要运行obj.wait()方法进行等待");
                        obj.wait();
                        System.out.println("线程等待结束");
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }
        };
        t.start();
        Thread.sleep(1000);
        synchronized(obj) {
            obj.notify();
        }
    }
}
```

* `interrput()`

* `Java`内存模型

CPU的高速缓存是每个CPU所独享的，在多线程的环境下，就会出现X修改了值，在未回写内存的情况下，被Y使用，从而造成数据不一致的问题。
同时，由于存在编译器的优化，会对指令重排序，从而造成执行过程不确定。
为了解决上述问题，
内存模型描述给定程序和该程序的执行跟踪，执行跟踪是否为程序的合法执行。Java编程语言内存模型的工作原理是检查执行跟踪中的每个读取，并根据某些规则检查该读取观察到的写入是否有效。内存模型描述了一个程序可能发生的行为。

2. `volatile`关键字

> volatile关键字可以保证直接从主存中读取一个变量，如果这个变量被修改后，总是会被写回到主存中去。Java内存模型是通过在变量修改后将新值同步回主内存，在变量读取前从主内存刷新变量值这种依赖主内存作为传递媒介的方式来实现可见性的，无论是普通变量还是volatile变量都是如此，普通变量与volatile变量的区别是：volatile的特殊规则保证了新值能立即同步到主内存，以及每个线程在每次使用volatile变量前都立即从主内存刷新。因此我们可以说volatile保证了多线程操作时变量的可见性，而普通变量则不能保证这一点。

```java
public class Volatile { 
    int o = 0;
    void set() { o++; }
    public static void main(String[] args) throws InterruptedException {
        Volatile o = new Volatile();
        Thread t = new Thread() {
            @Override
            public void run() {
                while(o.o != 1) { System.out.println("working a..."); }
                System.out.println("worked a ...");
            }   
        };
        Thread t1 = new Thread() {
            @Override
            public void run() {
                while(o.o == 0) {
                    o.set();
                    System.out.println("working b ...");
                }
                System.out.println("worked b ...");
            }   
        };
        t.start();
        t1.start();
        Thread.sleep(1000);
    }
}
```

3. `synchronized`关键字  
`Java`内置关键字，通过`monitorenter`和`monitorexit`实现该能力，其实是对对象加锁。具有原子性、可见性、可重入性、重量级锁等特点。  
可以放置的地方如：
- 代码块

```java
synchronized {
    this.account++;
}
```
- 方法

```java
synchronized void transfer() {
    ...
}
```

- 对象

```java
static int account;
static synchronized method {
    this.account++;
}
```

`synchronized`是可重入锁，可重入锁是指以线程为单位，当一个线程在获取对象锁后，这个线程可以再次获取该对象的锁，而其他线程不可以。

- 可重入锁原理  
通过记录对象上锁的线程及数量来控制可重入性。
+ 调用`synchronized`代码时，检查该对象是否已经被锁，如果被锁，判断是否被当前线程锁定，如是，则计数加1；否则，加入等待队列。
+ 退出`synchronized`，将计数减1，直到为0，则释放锁。  
对象头，2个字的空间，包括：markword(synchronization+gc+hashcode)+object-ptr

- 偏向锁、轻量级锁、重量级锁概念  
**偏向锁**  
介于无锁和轻量级锁之间的一种状态，由markword记录当前所占用对象的thread id  
（1）初始时对象处于biasable状态，并且ThreadID为0即biasable & unbiased状态（这里不讨论epoch和age）  
（2）当一个线程试图锁住一个处于biasable & unbiased状态的对象时，通过一个CAS将自己的ThreadID放置到Mark Word中相应的位置，如果CAS操作成功进入第（3）步否则进入（4）步  
（3）当进入到这一步时代表当前没有锁竞争，Object继续保持biasable状态，但是这时ThreadID字段被设置成了偏向锁所有者的ID，然后进入到第（6）步  
（4）当前线程执行CAS获取偏向锁失败（这一步是偏向锁的关键），表示在该锁对象上存在竞争并且这个时候另外一个线程获得偏向锁所有权。当到达全局安全点（safepoint）时获得偏向锁的线程被挂起，并从偏向锁所有者的私有Monitor Record列表中获取一个空闲的记录，并将Object设置为LightWeight Lock状态并且Mark Word中的LockRecord指向刚才持有偏向锁线程的Monitor record，最后被阻塞在安全点的线程被释放，进入到轻量级锁的执行路径中，同时被撤销偏向锁的线程继续往下执行同步代码。  
（5）当一个线程试图锁住一个处于biasable & biased并且ThreadID不等于自己的ID时，这时由于存在锁竞争必须进入到第（4）步来撤销偏向锁。  
（6）运行同步代码块  
**轻量级锁**  
偏向锁->竞争->轻量级锁->OS Mutex->重量级锁  
轻量级锁会将被锁的对象的markword复制写入栈，形成lock record，并通过CAS将markword指向lock record。如果指向成功，则获取了对象锁。如果失败，则会膨胀，对象的markword会被os mutex和变量所CAS设置。解锁时过程一致，先去试图CAS lock record，如果失败，则CAS os mutex。  
**重量级锁**    
os mutex互斥锁

4. 锁

* `Lock`  

`Lock`提供了对共享资源的独占访问：一次只有一个线程可以获得该锁，而对该共享资源的所有访问都需要首先获取该锁，JUC包中的`Lock`提供比`synchronized`更为灵活的使用方式，例如，一些遍历并发访问的数据结构的算法需要使用“移交”或“链锁”：获取节点A的锁，然后是节点B，然后释放A并获取C，然后释放B，然后获取D等等。锁接口的实现通过允许在不同的范围内获取和释放一个锁，并允许以任何顺序对多个锁进行获取和释放，从而允许使用这些技术。随着这种灵活性的增加，又增加了额外的责任。 
```java
 Lock l = ...;
 l.lock();
 try {
   // access the resource protected by this lock
 } finally {
   l.unlock();
 }
```

```java
interface Lock {
    void lock();
    void lockInterruptibly();
    Condition newCondition();
    boolean tryLock();
    boolean tryLock(long time, TimeUnit unit);
    void unlock();
} 
```

* `Condition`
`Lock`完成了对`JVM`层面的`synchronized`关键字的替代，`Condition`完成了对`Object`的监视器方法的替代。



* `ReentrantLock`  

基于`AQS`+`CAS`实现锁机制

`AQS`(AbstractQueuedSynchronizer)
```
     +------+  prev +-----+       +-----+
head |      | <---- |     | <---- |     |  tail
     +------+       +-----+       +-----+
```
基于队列模型，将新的线程加入到队列的尾部。

Node的数据结构：
```java
static class Node {
    volatile int waitStatus;
    volatile Node pre;
    volatile Node next;
    volatile Thread thread;
    Node nextWaiter;
    final boolean isShared();
    final Node predecessor();
    final boolean compareAndSetNext();
}
```

```java
public class JUCLocksTest {
    /**
     * main
     * @param args
     */
    public static void main(String[] args) throws InterruptedException {
        A share = new A(0);
        for (int i = 0; i < 100; i++) {
            Thread t = new MyThread("Thread" + i, share);
            t.start();
        }

        Thread.sleep(10 * 1000);
    }
}

class MyThread extends Thread {

    private String name;
    private A share;

    MyThread(String name, A share) {
        this.name = name;
        this.share = share;
    }

    @Override
    public void run() {
        int sh = share.add();
        System.out.println(name + ":" + sh);
    }
}

class A {
    private int share;
    private ReentrantLock l = new ReentrantLock(true);


    A(int i) {
        this.share = i;
    }

    public int add() {
        l.lock();
        try {
            share++;
            return share;
        }finally {
            l.unlock();
        }
    }
}
```

* `ReentrantReadWriteLock`

- `ReadWriteLock`
适用于读多写少的情况，其包括读锁和写锁，成功获取读锁的线程会看到所有写锁的更新。
当然读写锁是否能够提高性能，取决于实际对读数据和写数据的频率。

```java
public Lock readLock();
public Lock writeLock();
```

- `ReentrantReadWriteLock`

1. 获取锁顺序  
支持公平锁和非公平锁。

排他锁和共享锁的记录通过`count`的低16位和高16位分别记录，因此最大支持65535次的重入。
获取排他锁的过程如下：
```java
protected final boolean tryAcquire(int acquires) {
    /*
    * Walkthrough:
    * 1. If read count nonzero or write count nonzero
    *    and owner is a different thread, fail.
    * 2. If count would saturate, fail. (This can only
    *    happen if count is already nonzero.)
    * 3. Otherwise, this thread is eligible for lock if
    *    it is either a reentrant acquire or
    *    queue policy allows it. If so, update state
    *    and set owner.
    */
    Thread current = Thread.currentThread();
    int c = getState(); // 获取当前锁状态，如果为0，表示未持有；其他则表示持有锁。
    int w = exclusiveCount(c); // 获取持有count的排他锁数量
    if (c != 0) {
        // (Note: if c != 0 and w == 0 then shared count != 0)
        if (w == 0 || current != getExclusiveOwnerThread())
            return false;
        if (w + exclusiveCount(acquires) > MAX_COUNT)
            throw new Error("Maximum lock count exceeded");
        // Reentrant acquire
        setState(c + acquires);
        return true;
    }
    if (writerShouldBlock() ||
        !compareAndSetState(c, c + acquires))
        return false;
    setExclusiveOwnerThread(current);
    return true;
}
```

共享锁的获取
```java
final int fullTryAcquireShared(Thread current) {
    /*
        * This code is in part redundant with that in
        * tryAcquireShared but is simpler overall by not
        * complicating tryAcquireShared with interactions between
        * retries and lazily reading hold counts.
        */
    HoldCounter rh = null;
    for (;;) {
        int c = getState();
        if (exclusiveCount(c) != 0) {
            if (getExclusiveOwnerThread() != current)
                return -1;
            // else we hold the exclusive lock; blocking here
            // would cause deadlock.
        } else if (readerShouldBlock()) {
            // Make sure we're not acquiring read lock reentrantly
            if (firstReader == current) {
                // assert firstReaderHoldCount > 0;
            } else {
                if (rh == null) {
                    rh = cachedHoldCounter;
                    if (rh == null ||
                        rh.tid != LockSupport.getThreadId(current)) {
                        rh = readHolds.get();
                        if (rh.count == 0)
                            readHolds.remove();
                    }
                }
                if (rh.count == 0)
                    return -1;
            }
        }
        if (sharedCount(c) == MAX_COUNT)
            throw new Error("Maximum lock count exceeded");
        if (compareAndSetState(c, c + SHARED_UNIT)) {
            if (sharedCount(c) == 0) {
                firstReader = current;
                firstReaderHoldCount = 1;
            } else if (firstReader == current) {
                firstReaderHoldCount++;
            } else {
                if (rh == null)
                    rh = cachedHoldCounter;
                if (rh == null ||
                    rh.tid != LockSupport.getThreadId(current))
                    rh = readHolds.get();
                else if (rh.count == 0)
                    readHolds.set(rh);
                rh.count++;
                cachedHoldCounter = rh; // cache for release
            }
            return 1;
        }
    }
}
```
通过直接在`cachedHoldCounter`，即直接在线程的锁计数上进行累加。

2. 可重入性  
允许读者和写者以重入锁的样式重新获取读或写锁。在发布写线程持有的所有写锁之前，不允许使用非重入式读者。此外，可以获取读取锁，但不是反之亦然。在其他应用程序中，当在调用或回调在读取锁下执行读取的方法时保持写锁时，重入性可能很有用。如果一个读者试图获得写锁，它将永远不会成功。
3. 锁降级  
允许从持有写锁的情况下，再获取读锁，然后再释放写锁，将原持有的写锁，降级为读锁。
4. 锁中断
5. Condition支持

* 开放出的API中，主要包括`WatingQueue`, `Queue`，均属于`AQS`的一部分  


* `LockSupport`作用及其原理
提供了基本的阻塞原语，  

`await()`, `signal()`
```java
public final void await() throws InterruptedException {
    if (Thread.interrupted())
        throw new InterruptedException();
    Node node = addConditionWaiter();
    int savedState = fullyRelease(node);
    int interruptMode = 0;
    while (!isOnSyncQueue(node)) {
        LockSupport.park(this);
        if ((interruptMode = checkInterruptWhileWaiting(node)) != 0)
            break;
    }
    if (acquireQueued(node, savedState) && interruptMode != THROW_IE)
        interruptMode = REINTERRUPT;
    if (node.nextWaiter != null) // clean up if cancelled
        unlinkCancelledWaiters();
    if (interruptMode != 0)
        reportInterruptAfterWait(interruptMode);
}
```
步骤如下：  
1. 如果当前线程已经被中断，则抛出`InterruptedException`;
2. 通过`getState()`获取当前锁状态并保存;
3. 调用`release()`;
4. 阻塞进程直到`signalled`或者`intterrupted`;
5. 再次通过当前状态调用获取锁，如果获取到，则再次中断;
6. 如果在阻塞中被中断，则抛出`InterruptedException`;

疑问：为什么会再次获取？这里是为了探测是否可以中断，针对于在阻塞中没有正常中断的情况。

5. `Future`, `Callable`, `FutureTask`

```java
public class FutureCallable {
    public static void main(String[] args) throws InterruptedException, ExecutionException {
        Callable<Integer> callable = () -> {return 1;};
        ExecutorService service = Executors.newSingleThreadExecutor();
        Future<Integer> f = service.submit(callable);
        System.out.println(f.get());;
        service.shutdown();
    }
}
```

`Callable`接口定义带有返回值的方法
```java
public interface Callable<V> {
    V call() throws Exception;
}
```

`Future`接口定义异步线程的返回结果
```java
public interface Future<V> {
    boolean cancel(boolean mayInterruptIfRunning);
    boolean isCancelled();
    boolean isDone();
    V get() throws InterruptedException, ExecutionException;
    V get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException;
}
```

`FutureTask`可以被用来封装`Callable`或`Runnable`对象，一般用户记录task的执行状态（7种）等信息。

```java
FutureTask<Integer> t = new FutureTask<>(callable);
service.submit(t);
System.out.println(t.get());;
service.shutdown();
```

6. 线程池
`corePoolSize`指最小保活线程数
`maximumPoolSize`指最大池大小
`workQueue`是`BlockingQueue<Runnable>`，主要用来存放待运行的任务
`workers`是所有`Worker`的集合`HashSet<Worker> workers = new HashSet<>();`
`ctl`是主线程池`control state`的表示，是一个原子整形比那辆，包含了两个概念

- workerCount  
表明现有的线程数
- runState  
表明运行状态，如运行，停止等等，一共有5种状态，分别是`RUNNING`, `SHUTDOWN`, `STOP`, `TIDYING`, `TERMINATED`这些。

线程池工作原理
1. 如果小于`corePoolSize`大小，则启动新线程作为第一个任务；
2. 否则，加入到任务队列中；
3. 如果队列满不能加入到队列中，则试图创建新的线程；
4. 如果失败，则拒绝等操作；

`Worker`实现了`AQS`和`Runnbale`，`AQS`方面主要是提供了一种不可重入的锁机制，以免在对线程池进行操作时，出现多个同时操作问题，`Runnable`则提供了一种线程的实现。

`addWorker()`提供了任务集合启动新的工作线程的基本方法，核心逻辑是：
1. 检查当前线程池状态，如果是`SHUTDOWN`或者`STOP`状态，则直接返回；
2. 否则，判断当前`workCount`是否超过最大池大小或`coreSize`，如果是，则直接返回;
3. 否则，增加`workCount`计数，并再次获取线程池状态，如果已经停止，则再次尝试；
4. 否则，判断如果是`RUNNING`状态或`SHUTDOWN`状态且`firstTask==null`，向`worker`集合中添加线程，添加成功则调用`start()`启动该`worker`，作为单独的线程；
5. 否则减少`workCount`；

`runWorker()`提供了不断从`Queue`中获取任务，并执行。核心逻辑是：
1. 从`Queue`中获取任务，如果任务不为`null`，则锁定`worker`对象;
2. 执行`beforeExecute()`，做运行任务前的准备工作;
3. 执行任务`run()`方法；
4. 执行`afterExecute()`方法；
5. 处理`worker`退出相关逻辑；

`processWorkerExit()`提供了从`worker`中退出的逻辑，核心是：
1. 获取全局锁对象，从`worker`集合中移除当前`worker`；
2. 调用`tryTerminate()`停止`worker`；
3. 判断线程池状态是否处于运行状态，如果是，判断当前所拥有的`worker`是否小于`coreSize`；
4. 如果是，则创建新的`worker`；否则，不做处理;

上面简要介绍了`Worker`的工作过程，那么针对于任务的`Queue`，又有不同的策略，适用于不同的场景。  
`SynchronousQueue`: 它将任务传递给线程而不保留线程。在这里，如果没有立即可用的线程来运行它，那么对任务进行排队的尝试将失败，因此将构造一个新的线程。此策略可在处理可能具有内部依赖关系的请求集时避免发生阻塞。直接切换通常需要无界的最大池大小，以避免拒绝新提交的任务。这反过来又允许当命令的平均到达速度快时，无限线程增长的可能性。

`LinkedBlockingQueue`：无界队列。使用一个无界的队列（例如，一个没有预定义容量的链式阻塞队列）将导致新任务在队列中等待。因此，只能创建代码池大小的线程。（因此，最大池大小的值没有任何影响。）当每个任务都完全独立于其他任务时，这可能很合适，因此任务不能影响彼此的执行；例如，在网页服务器中。虽然这种风格的排队可以用于平滑瞬态请求突发，但它承认当命令继续到达速度比处理速度更快时，就存在无限工作队列增长的可能性。

`ArrayBlockingQueue`：一个有界的队列（例如，一个仲裁阻塞队列）在使用有限的最大池大小时，有助于防止资源耗尽，但可能更难调整和控制。队列大小和最大池大小可以相互交换：使用大队列和小池可以最大限度地减少CPU使用、操作系统资源和上下文切换开销，但可能导致人为的低吞吐量。如果任务经常阻塞（例如，如果它们是I/O绑定的），则系统可能能够为更多的线程调度时间。使用小队列通常需要更大的池大小，这使cpu更繁忙，但可能会遇到不可接受的调度开销，这也会降低吞吐量。

常见的线程池类型有：
- `FixedThreadPool`
使用`LinkedBlockingQueue`实现。

- `CachedThreadPool`
使用`SynchronousQueue`实现，默认60s退出；

- `ScheduledThreadPool`
使用`DelayedWorkQueue`实现

- 自定义参数构造线程池

7. `CountdownLatch`, `CyclicBarrier`, `Semaphor`

- `CountDownLatch`  
提供了一种同步辅助手段，允许等待其他线程或操作结束后再执行的方法。  
包括方法`CountDownLatch(N)`，`await()`和`countDown()`  
参数`N`提供了要执行等待的计数，直到为`0`才会释放阻塞。  
内部根据`AQS`实现对状态的控制，通过`CAS`实现数据计数的操作。

特点：一次性控制器，不可以再次设置，如果要再次设置，需采用`CyclicBarrier`

```java
import java.util.concurrent.CountDownLatch;

public class CountLatch {
    public static void main(String[] args) throws InterruptedException {
        CountDownLatch startSignal = new CountDownLatch(1);
        CountDownLatch stopSingal = new CountDownLatch(10);

        for (int i = 0; i < 10; i++) {
            Thread t = new Thread() {
                public void run() {
                    try {
                        startSignal.await();
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                    System.out.println("thread started ... " + Thread.currentThread().getName());
                    stopSingal.countDown();
                };
            };
            t.start();
        }

        System.out.println("main started....");
        startSignal.countDown();
        System.out.println("main running....");
        stopSingal.await();
    }
}
```

- `CyclicBarrier`

```java
public class CyclBarrier {
    CyclicBarrier cyclicBarrier = null;

    public static void main(String[] args) throws InterruptedException, BrokenBarrierException {
        new CyclBarrier().work();
    }

    public void work() throws InterruptedException, BrokenBarrierException {
        int N = 10;
        Runnable action =  new Runnable(){
            @Override
            public void run() {
                System.out.println("merge ... ");
            }
        };
        cyclicBarrier = new CyclicBarrier(N, action);

        List<Thread> threads = new ArrayList<Thread>(N);
        for (int i = 0; i < N; i++) {
            Thread thread = new Thread(new Worker(i));
            threads.add(thread);
            thread.start();
        }
        for (Thread thread : threads) {
            thread.join();
        }
    }

    class Worker implements Runnable {
        int row;
    
        public Worker(int r) {
            this.row = r;
        }
        @Override
        public void run() {
            System.out.println("executing ... " + row);
            try {
                cyclicBarrier.await();
            } catch (InterruptedException e) {
                e.printStackTrace();
            } catch (BrokenBarrierException e) {
                e.printStackTrace();
            }
        }
    }
}
```

- `Semaphore`


8. 生产者和消费者模型 

9. 并发容器`ConcurrentHashMap`
```java


```

参考文献 

[Java多线程](https://www.caveofprogramming.com/library/index.html#java-multithreading)  
[Java语言规范](https://docs.oracle.com/javase/specs/jls/se16/html/jls-17.html)  
[Java内存模型](https://zhuanlan.zhihu.com/p/29881777)  
[Java轻量级锁与偏向锁](https://www.oracle.com/technetwork/java/biasedlocking-oopsla2006-wp-149958.pdf)  
[Linux Mutex](https://www.kernel.org/doc/html/latest/locking/mutex-design.html)  